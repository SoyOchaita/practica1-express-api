openapi: 3.0.3
info:
  title: Practica 1 — Express API
  version: 1.0.0
  description: |
    API de microblog con autenticación JWT, usuarios, follows y posts.
    Base de datos: PostgreSQL. Respuestas pensadas para pruebas con Postman.
servers:
  - url: http://localhost:3000
tags:
  - name: Auth
  - name: Users
  - name: Posts
security:
  - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          example: "credenciales inválidas"
        ok:
          type: boolean
          example: false
        code:
          type: string
          example: "ALREADY_FOLLOWING"

    UserPublic:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        username:
          type: string
          pattern: "^[a-zA-Z0-9]{3,30}$"
        created_at:
          type: string
          format: date-time
      required: [id, email, username, created_at]

    RegisterRequest:
      type: object
      required: [email, password, username]
      properties:
        email:
          type: string
          format: email
          example: a@a.com
        password:
          type: string
          minLength: 8
          example: "SuperSegura123"
        username:
          type: string
          pattern: "^[a-zA-Z0-9]{3,30}$"
          example: userA123

    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
          example: a@a.com
        password:
          type: string
          example: "SuperSegura123"

    LoginResponse:
      type: object
      properties:
        message:
          type: string
          example: "Inicio de sesión exitoso."
        token:
          type: string
          description: "JWT válido por 5 minutos"
        userId:
          type: string
          format: uuid
        expiresInSeconds:
          type: integer
          example: 300
        needsUsername:
          type: boolean
          example: false

    ChangeUsernameRequest:
      type: object
      required: [username]
      properties:
        username:
          type: string
          pattern: "^[a-zA-Z0-9]{3,30}$"
          example: nuevo123

    FollowResponse:
      type: object
      properties:
        ok:
          type: boolean
          example: true
        code:
          type: string
          example: "FOLLOW_CREATED"
        message:
          type: string
          example: "Has seguido a juan123 (uuid)."
        data:
          type: object
          properties:
            followingId:
              type: string
              format: uuid
            username:
              type: string
            createdAt:
              type: string
              format: date-time
            deleted:
              type: boolean

    Post:
      type: object
      properties:
        id: { type: string, format: uuid }
        author_id: { type: string, format: uuid }
        author_username: { type: string }
        content: { type: string, maxLength: 280 }
        created_at: { type: string, format: date-time }

    PostCreateRequest:
      type: object
      required: [content]
      properties:
        content:
          type: string
          minLength: 1
          maxLength: 280
          example: "Hola mundo"

paths:

  /auth/register:
    post:
      tags: [Auth]
      summary: Registrar usuario
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        "201":
          description: "Creado"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPublic"
        "400":
          description: "Datos inválidos, email/username requeridos, password < 8"
        "409":
          description: "Email o username ya en uso"

  /auth/login:
    post:
      tags: [Auth]
      summary: Iniciar sesión (JWT 5 min)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "400":
          description: "Falta email o password"
        "401":
          description: "Credenciales inválidas"

  /users/me:
    get:
      tags: [Users]
      summary: Mi perfil (usuario autenticado)
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPublic"
        "401":
          description: "Token inválido/expirado"
        "404":
          description: "Usuario no encontrado"
    delete:
      tags: [Users]
      summary: Borrar mi usuario y datos asociados
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: "Usuario borrado"
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean, example: true }
                  code: { type: string, example: "USER_DELETED" }
                  message: { type: string, example: "Usuario y datos asociados eliminados" }
                  data:
                    type: object
                    properties:
                      id: { type: string, format: uuid }
                      email: { type: string, format: email }
                      username: { type: string }
        "401":
          description: "Token inválido/expirado"
        "404":
          description: "Usuario no encontrado"

  /users/me/username:
    patch:
      tags: [Users]
      summary: Cambiar mi username
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangeUsernameRequest"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPublic"
        "400":
          description: "Formato inválido (solo letras y números, 3..30)"
        "401":
          description: "Token inválido/expirado"
        "404":
          description: "Usuario no encontrado"
        "409":
          description: "Username en uso"

  /users/{id}/follow:
    post:
      tags: [Users]
      summary: Seguir por ID
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        "201":
          description: "Follow creado"
          headers:
            X-Follow-Status:
              schema: { type: string, example: created }
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FollowResponse"
        "400":
          description: "Intento de seguirse a sí mismo"
        "401":
          description: "Token inválido/expirado"
        "404":
          description: "Usuario destino no existe"
        "409":
          description: "Ya seguías a este usuario"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FollowResponse"
    delete:
      tags: [Users]
      summary: Dejar de seguir por ID
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        "200":
          description: "Follow eliminado"
          headers:
            X-Follow-Status:
              schema: { type: string, example: deleted }
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FollowResponse"
        "401":
          description: "Token inválido/expirado"
        "409":
          description: "No sigues a ese usuario / usuario destino no existe"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/handle/{username}/follow:
    post:
      tags: [Users]
      summary: Seguir por username
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: username
          required: true
          schema: { type: string }
      responses:
        "201":
          description: "Follow creado"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FollowResponse"
        "400":
          description: "Intento de seguirse a sí mismo"
        "401":
          description: "Token inválido/expirado"
        "404":
          description: "Usuario destino no existe"
        "409":
          description: "Ya seguías a este usuario"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FollowResponse"
    delete:
      tags: [Users]
      summary: Dejar de seguir por username
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: username
          required: true
          schema: { type: string }
      responses:
        "200":
          description: "Follow eliminado"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FollowResponse"
        "401":
          description: "Token inválido/expirado"
        "409":
          description: "No sigues a ese usuario / usuario destino no existe"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /posts:
    get:
      tags: [Posts]
      summary: Listar posts (últimos primero) con filtros
      parameters:
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 100, default: 10 }
        - in: query
          name: authorId
          schema: { type: string, format: uuid }
        - in: query
          name: q
          schema:
            type: string
            description: "Búsqueda por texto en content"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
    post:
      tags: [Posts]
      summary: Crear post (1..280 chars)
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostCreateRequest"
      responses:
        "201":
          description: "Creado"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "400":
          description: "content vacío o > 280"
        "401":
          description: "Token inválido/expirado"

  /posts/following:
    get:
      tags: [Posts]
      summary: Feed de usuarios seguidos (últimos primero)
      security: [{ bearerAuth: [] }]
      parameters:
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 100, default: 10 }
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
        "401":
          description: "Token inválido/expirado"
